{"version":3,"sources":["component/GithubItem.jsx","component/Tab.jsx","App.js","serviceWorker.js","index.jsx"],"names":["GithubItem","props","ToGithubPage","window","location","href","htmlUrl","this","listNum","avatar","name","stargazersCount","forksCount","openIssuesCount","className","onClick","style","fontSize","padding","src","alt","width","margin","color","fontWeight","textAlign","marginRight","icon","faPeopleArrows","faStar","faGift","faWater","React","Component","Tab","switchTab","e","url","target","getAttribute","document","querySelectorAll","forEach","btn","classList","remove","add","setState","tabName","tabUrl","setTimeout","FetchGit","state","tabList","githubData","axios","get","res","data","items","paddingTop","display","marginTop","marginBottom","data-filter","map","list","index","key","length","item","owner","avatar_url","stargazers_count","forks_count","open_issues_count","html_url","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d3f3b65.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n  faPeopleArrows,\r\n  faGift,\r\n  faStar,\r\n  faWater,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../style/GithubItem.css\";\r\n\r\nclass GithubItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  ToGithubPage = () => {\r\n    window.location.href = this.props.htmlUrl;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      listNum,\r\n      avatar,\r\n      name,\r\n      stargazersCount,\r\n      forksCount,\r\n      openIssuesCount,\r\n    } = this.props;\r\n\r\n    const imgStyle = {\r\n      width: \"80%\",\r\n      margin: \"0 auto\",\r\n    };\r\n\r\n    const titleStyle = {\r\n      fontSize: \"25px\",\r\n      padding: \"15px 0\",\r\n    };\r\n\r\n    const nameStyle = {\r\n      color: \"indianred\",\r\n      fontWeight: \"500\",\r\n    };\r\n\r\n    const itemDetStyle = {\r\n      textAlign: \"left\",\r\n      margin: \"0 auto\",\r\n    };\r\n\r\n    const peopleStyle = {\r\n      color: \"orange\",\r\n      marginRight: \"9px\",\r\n    };\r\n    const starsStyle = {\r\n      color: \"#FFD700\",\r\n      marginRight: \"9px\",\r\n    };\r\n    const forksStyle = {\r\n      color: \"skyblue\",\r\n      marginRight: \"9px\",\r\n    };\r\n    const issuesStyle = {\r\n      color: \"#EDA1A7\",\r\n      marginRight: \"9px\",\r\n    };\r\n    return (\r\n      <div\r\n        className=\"github-item\"\r\n        onClick={this.ToGithubPage}\r\n      >\r\n        <span style={titleStyle}>#{listNum}</span>\r\n        <img src={avatar} alt=\"\" style={imgStyle} />\r\n        <p style={nameStyle}>{name}</p>\r\n        <div style={itemDetStyle}>\r\n          <div>\r\n            <FontAwesomeIcon style={peopleStyle} icon={faPeopleArrows} />\r\n            <span style={{fontWeight:'500'}}>{name}</span>\r\n          </div>\r\n          <div>\r\n            <FontAwesomeIcon style={starsStyle} icon={faStar} />\r\n            <span>{stargazersCount}stars</span>\r\n          </div>\r\n          <div>\r\n            <FontAwesomeIcon style={forksStyle} icon={faGift} />\r\n            <span>{forksCount}forks</span>\r\n          </div>\r\n          <div>\r\n            <FontAwesomeIcon style={issuesStyle} icon={faWater} />\r\n            <span>{openIssuesCount}openissues</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GithubItem;\r\n","import React from \"react\";\r\nimport GithubItem from \"./GithubItem\";\r\n\r\nimport axios from \"axios\";\r\nimport \"../style/Tab.css\";\r\n\r\nclass Tab extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tabList: [\r\n        {\r\n          name: \"java\",\r\n          url:\r\n            \"q=stars:%3E11+language:java&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"javascript\",\r\n          url:\r\n            \"q=stars:%3E11+language:javascript&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"css\",\r\n          url:\r\n            \"q=stars:%3E11+language:css&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"ruby\",\r\n          url:\r\n            \"q=stars:%3E1+language:ruby&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"python\",\r\n          url:\r\n            \"q=stars:%3E1+language:python&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n      ],\r\n      tabName: \"All\",\r\n      tabUrl: \"q=stars:%3E11&sort=stars&order=desc&type=Repositories\",\r\n      url: \"https://api.github.com/search/repositories?\",\r\n      githubData: [],\r\n    };\r\n  }\r\n\r\n  switchTab = (e, { name, url }) => {\r\n    let { target } = e;\r\n    const filterOption = target.getAttribute(\"data-filter\");\r\n    if (filterOption) {\r\n      document\r\n        .querySelectorAll(\".tab-list.active\")\r\n        .forEach((btn) => btn.classList.remove(\"active\"));\r\n      target.classList.add(\"active\");\r\n    }\r\n    this.setState({\r\n      tabName: name,\r\n      tabUrl: url,\r\n    });\r\n    setTimeout(() => {\r\n      this.FetchGit();\r\n    }, 200);\r\n  };\r\n\r\n  async FetchGit() {\r\n    this.setState({\r\n      githubData: [],\r\n    });\r\n    const res = await axios.get(this.state.url + this.state.tabUrl);\r\n    this.setState({\r\n      githubData: res.data.items,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.FetchGit();\r\n  }\r\n\r\n  render() {\r\n    const { githubData } = this.state;\r\n    const tabStyle = {\r\n      marginTop: \"14px\",\r\n      marginBottom: \"18px\",\r\n      width:\"100vw\"\r\n    };\r\n    const titleStyle = {\r\n        fontSize:\"25px\",\r\n        fontWeight:\"500\",\r\n        paddingTop:\"20px\",\r\n        display:\"block\",\r\n        width:\"100vw\"\r\n    }\r\n    return (\r\n      <div>\r\n        <span style={titleStyle}>Github热门项目</span>\r\n        <div style={tabStyle}>\r\n          <button\r\n            className=\"tab-list active\"\r\n            data-filter=\"All\"\r\n            onClick={(e) =>\r\n              this.switchTab(e, {\r\n                name: \"All\",\r\n                url: \"q=stars:%3E11&sort=stars&order=desc&type=Repositories\",\r\n              })\r\n            }\r\n          >\r\n            All\r\n          </button>\r\n          {this.state.tabList.map((list, index) => {\r\n            return (\r\n              <button\r\n                key={index}\r\n                className=\"tab-list\"\r\n                data-filter={list.name}\r\n                onClick={(e) => this.switchTab(e, list)}\r\n              >\r\n                {list.name}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"list-content\">\r\n          {githubData.length !== 0 ? (\r\n            githubData.map((item, index) => {\r\n              return (\r\n                <GithubItem\r\n                  key={index}\r\n                  listNum={++index}\r\n                  avatar={item.owner.avatar_url}\r\n                  name={item.name}\r\n                  stargazersCount={item.stargazers_count}\r\n                  forksCount={item.forks_count}\r\n                  openIssuesCount={item.open_issues_count}\r\n                  htmlUrl={item.html_url}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <div >刷新中...</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;\r\n","import React from 'react';\nimport Tab from './component/Tab';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tab/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}